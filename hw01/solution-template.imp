;;;;;;;;;;;;;;;;;;; CS 105 IMPCORE ASSIGNMENT ;;;;;;;;;;;;;;;

;; Your Name: Theo Dayton


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;;  Problem 1


;; (double-digit n) <does what exactly> (replace with function contract)

;; laws:
;;   (double-digit ...) == ...
;;   ...
;; [optional notes about where laws come from, or difficulty, if any]

(define double-digit (n)
    (/ 1 0)) ;; replace this line with a good implementation

        ;; replace next line with good check-expect or check-assert tests
        (check-error (double-digit 9))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;;  Problem 2


;; (population-count n) <does what exactly> (replace with function contract)

;; laws:
;;   (population-count ...) == ...
;;   ...
;; [optional notes about where laws come from, or difficulty, if any]

(define population-count (n)
    (/ 1 0)) ;; replace this line with a good implementation

        ;; replace next line with good check-expect or check-assert tests
        (check-error (population-count 9))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;;  Problem 3


;; (binary n) <does what exactly> (replace with function contract)

;; laws:
;;   (binary ...) == ...
;;   ...
;; [optional notes about where laws come from, or difficulty, if any]

(define binary (n)
    (/ 1 0)) ;; replace this line with a good implementation

        ;; replace next line with good check-expect or check-assert tests
        (check-error (binary 9))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;;  Problem 4


;; (sigma m n) <does what exactly> (replace with function contract)

;; laws:
;;   (sigma ...) == ...
;;   ...
;; [optional notes about where laws come from, or difficulty, if any]

(define sigma (m n)
    (/ 1 0)) ;; replace this line with a good implementation

        ;; replace next line with good check-expect or check-assert tests
        (check-error (sigma 9 9))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;;  Problem 5


;; (prime? n) <does what exactly> (replace with function contract)

;; laws:
;;   (prime? ...) == ...
;;   ...
;; [optional notes about where laws come from, or difficulty, if any]

(define prime? (n)
    (/ 1 0)) ;; replace this line with a good implementation

        ;; replace next line with good check-expect or check-assert tests
        (check-error (prime? 9))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;;  Problem 6


;; (nthprime n) <does what exactly> (replace with function contract)

;; laws:
;;   (nthprime ...) == ...
;;   ...
;; [optional notes about where laws come from, or difficulty, if any]

(define nthprime (n)
    (/ 1 0)) ;; replace this line with a good implementation

        ;; replace next line with good check-expect or check-assert tests
        (check-error (nthprime 9))
