;;;;;;;;;;;;;;;;;;; CS 105 IMPCORE ASSIGNMENT ;;;;;;;;;;;;;;;

;; Your Name: Theo Dayton


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;;  Problem 1


;; (double-digit n) Takes a positive integer. If this integer is less than
;;                  20,000, returns a positive integer whose decimal
;;                  representation is the same as the decimal representattion
;;                  of the input, except each digit appears twice

;; laws:
;;   (double-digit d) == 0
;;   (double-digit (+ (* m 10) d)) == (+ (+ (* (double-digit (/ n 10)) 100)
;;   (* (mod n 10) 10)) (mod n 10))
;;   ...

(define double-digit (n)
        (if (= n 0)
            0
            (+ (+ (* (double-digit (/ n 10)) 100) (* (mod n 10) 10))
                (mod n 10))
            );
    )

        ;; replace next line with good check-expect or check-assert tests
        (check-expect (double-digit 1) 11)
        (check-expect (double-digit 12) 1122)
        (check-expect (double-digit 123) 112233)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;;  Problem 2


;; (population-count n) Takes a nonnegative integer. Returns the number of 1
;; bits in the binary representation of that integer

;; laws:
;;   (population-count n) == 0
;;   (population-count (+ (/ n 2) b) == (+ (population-count (/ n 2)) (mod n 2))
;;   ...

(define population-count (n)
    (if (= n 0)
        0
        (+ (population-count(/ n 2)) (mod n 2))
        )
    )

        ;; replace next line with good check-expect or check-assert tests
        (check-expect (population-count 0) 0)
        (check-expect (population-count 1) 1)
        (check-expect (population-count 12) 2)
        (check-expect (population-count 150) 4)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;;  Problem 3


;; (binary n) Takes a nonnegative integer. Returns the number whose decimal
;; representation looks like the binary representation of this integer.

;; laws:
;;   (binary n) == 0
;;   (binary (+ (* n 2) b)) == (+ (*(binary(/ n 2)) 10) (mod n 2)))
;;   

(define binary (n)
    (if (= n 0)
        0
        (+ (mod n 2) (*(binary(/ n 2)) 10))
        )
    )

        ;; replace next line with good check-expect or check-assert tests
        (check-expect (binary 0) 0)
        (check-expect (binary 10) 1010)
        (check-expect (binary 76) 1001100)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;;  Problem 4


;; (sigma m n) Takes two integers. Returns the sum of all elements
;; in the set {i | m <= i <= n}

;; laws:
;;   (sigma m n) == 0, where m > n
;;   (sigma m n) == n, where n - m = 0
;;   (sigma m n) == (+ m (sigma(+ m 1) n)), where n - m = k + 1, and k
;;   is a natural number

(define sigma (m n)
    (if (> m n)
        0
        (+ m (sigma(+ m 1) n))
        )
    )

        ;; replace next line with good check-expect or check-assert tests
        (check-expect (sigma 1 4) 10)
        (check-expect (sigma 10 15) 75)
        (check-expect (sigma 3 3) 3)
        (check-expect (sigma 7 2) 0) 



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;;  Problem 5


;; (prime? n) Takes an integer n. If n is prime, returns true. Otherwise returns
;; false

;; laws:
;;   (prime? n) == 1, where n = 2
;;   (prime? n) == 0, where n < 2
;;   (prime? n) == (recursive-prime? n (- n 1)), where n > 2

(define prime? (n)
    (recursive-prime? n (- n 1)))

        ;; replace next line with good check-expect or check-assert tests
        (check-expect (prime? 10) 0)
        (check-expect (prime? 29) 1)
        (check-expect (prime? 4000) 0)
        (check-expect (prime? 4001) 1)

;; (recursive-prime? m n) Takes two integers. Returns 1 if n is prime,
;; else returns 0.
(define recursive-prime? (n m)
    (if (or (= n 2) (< m 2))
        1
        (if (= 0 (mod n m))
            0
            (recursive-prime? n (- m 1))
            )
        )
    )



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;;  Problem 6


;; (nthprime n) Takes a positive integer n. Returns the nth prime number

;; laws:
;;   (nthprime n) == 2, where n = 1
;;   (nthprime n) == (find-prime 2 n), where n > 1
;;   ...

(define nthprime (n)
    (find-prime 2 n)
    )

        ;; replace next line with good check-expect or check-assert tests
        (check-expect (nthprime 1) 2)
        (check-expect (nthprime 20) 71)
        (check-assert (prime? (nthprime 6)))
        (check-assert (not (prime? (+ 1 (nthprime 7)))))

;; (find-prime n m) Takes two integers. Returns the mth prime bigger than n

(define find-prime (n m)
        (if (= m 0)
            n
            (if (prime? n)
                (if (= m 1)
                    (find-prime n (- m 1))
                    (find-prime (+ n 1) (- m 1))
                    )
                (find-prime (+ n 1) m)
                )
            )
    )